#!/usr/bin/env lua

local ctrim = require('ctrim')

describe("ctrim", function()
    it("should handle empty strings correctly", function()
        assert.are.same(ctrim(""), "")
    end)
    it("should handle spaces correctly", function()
        assert.are.same(ctrim(" "), "")
        assert.are.same(ctrim("  "), "")
        assert.are.same(ctrim(" a "), "a")
        assert.are.same(ctrim("   a   "), "a")
        assert.are.same(ctrim("  a b   "), "a b")
    end)
    it("should handle tabs correctly", function()
        assert.are.same(ctrim("\t"), "")
        assert.are.same(ctrim("\ta\t"), "a")
        assert.are.same(ctrim("\ta\tb\t"), "a\tb")
        assert.are.same(ctrim("\t\t\t\ta\t\t\tb\t"), "a\t\t\tb")
    end)
    it("should handle newlines correctly", function()
        assert.are.same(ctrim("\n"), "")
        assert.are.same(ctrim("\na\n"), "a")
        assert.are.same(ctrim("\na\nb\n"), "a\nb")
        assert.are.same(ctrim("\n\n\n\na\n\n\nb\n"), "a\n\n\nb")
    end)
    it("should handle mixed whitespace correctly", function()
        assert.are.same(ctrim(" \n\t"), "")
        assert.are.same(ctrim(" \n\ta\t\n "), "a")
        assert.are.same(ctrim(" \n\ta\t\n b \n\t"), "a\t\n b")
    end)
    it("should handle provided trim character", function()
        assert.are.same(ctrim("__", "_"), "")
        assert.are.same(ctrim("_a_", "_"), "a")
        assert.are.same(ctrim("__", "_"), "")
        assert.are.same(ctrim("_a_b_", "_"), "a_b")
    end)
    it("should handle multiple provided trim characters", function()
        assert.are.same(ctrim("_-_", "_-"), "")
        assert.are.same(ctrim("_-a_-", "_-"), "a")
        assert.are.same(ctrim("_-a-_b-_", "_-"), "a-_b")
    end)
end)
